USING museumdb

DELIMITER $$


--Will return all aquisitions, their artist, date of acquisition, and price
CREATE PROCEDURE GetAcquisitionHistory()
BEGIN
    SELECT ACQUISITION.acquisition_id, ARTWORK.title, ARTIST.first_name, ARTIST.last_name, ACQUISITION.price_value, ACQUISITION.acquisition_date
    FROM ACQUISITION
    LEFT JOIN ARTWORK ON ACQUISITION.artwork_id = ARTWORK.artwork_id
    LEFT JOIN ARTWORK_CREATOR ON ARTWORK.artwork_id = ARTWORK_CREATOR.artwork_id
    LEFT JOIN ARTIST ON ARTWORK_CREATOR.artist_id = ARTIST.artist_id
    ORDER BY ACQUISITION.acquisition_date;
END$$


--Gets all donations from a specified human donor
CREATE PROCEDURE GetHumanDonorSummary(
    IN p_first_name varchar(255),
    IN p_last_name varchar(255),
    IN p_email varchar(255)
)
BEGIN
    SELECT DONATION.donation_id, DONATION.donation_date, DONATION.amount, DONATION.purpose
    FROM DONOR
    LEFT JOIN DONATION ON DONOR.donor_id = DONATION.donor_id
    WHERE DONOR.first_name = p_first_name AND DONOR.last_name = p_last_name AND DONOR.email = p_email
    ORDER BY DONATION.donation_date;
END$$


--Gets all donations from a specified organization
CREATE PROCEDURE GetOrgDonorSummary(
    IN p_organization_name varchar(255),
    IN p_email varchar(255)
)
BEGIN
    SELECT DONATION.donation_id, DONATION.donation_date, DONATION.amount, DONATION.purpose
    FROM DONOR
    LEFT JOIN DONATION ON DONOR.donor_id = DONATION.donor_id
    WHERE DONOR.organization_name = p_organization_name AND DONOR.email = p_email
    ORDER BY DONATION.donation_date;
END$$


--returns top 10 donors
CREATE PROCEDURE GetTopDonors()
BEGIN
    SELECT DONOR.donor_id, DONOR.first_name, DONOR.last_name, DONOR.organization_name, SUM(DONATION.amount) AS total
    FROM DONATION
    LEFT JOIN DONOR ON DONATION.donor_id = DONOR.donor_id
    GROUP BY DONOR.donor_id
    ORDER BY total DESC
    LIMIT 10;
END$$


--returns how many of a certain product has been sold and total revenue from it
CREATE PROCEDURE GetRevenueByItem(
    IN p_id int
)
BEGIN
    SELECT SHOP_ITEM.item_id, SHOP_ITEM.item_name, SUM(SALE_ITEM.quantity) AS number_sold, SUM(SALE_ITEM.quantity * SALE_ITEM.price_at_sale) AS total_revenue
    FROM SHOP_ITEM
    LEFT JOIN SALE_ITEM ON SHOP_ITEM.item_id = SALE_ITEM.item_id
    WHERE SHOP_ITEM.item_id = p_id
    GROUP BY SHOP_ITEM.item_id;
END$$


--Returns how much products sold/revenue generated by a certain category of items.
--Category does not need to be an exact match
CREATE PROCEDURE GetRevenueByCategory(
    IN p_category varchar(255)
)
BEGIN
    SELECT SHOP_ITEM.category, SUM(SALE_ITEM.quantity) AS number_sold, SUM(SALE_ITEM.quantity * SALE_ITEM.price_at_sale) AS total_revenue
    FROM SHOP_ITEM
    LEFT JOIN SALE_ITEM ON SHOP_ITEM.item_id = SALE_ITEM.item_id
    WHERE SHOP_ITEM.category LIKE CONCAT('%',p_category,'%')
    GROUP BY SHOP_ITEM.category;
END$$

DELIMITER ;